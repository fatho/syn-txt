A text-based synthesizer
========================

.. toctree::
  :maxdepth: 2
  :caption: Contents:


The goal is for this to be a declarative, text-based synthesizer/audio workstation.
At the moment, it is very much work in progress. The repository contains a roadmap_
with a rough outline of what is planned for the near future.

However, there is already a working prototype that includes

- an interpreter for a very small subset of a scheme-like language
  that can be used for defining piano rolls (examples_)
- a synthesizer turning notes into waveforms
- an interpreter for that language to play piano rolls on the built-in synthesizer

Example
-------

To give you an example, a few simple chords on a customized synthesizer
can be generated with the following code snippet (chords.syn_):

.. code-block:: scheme

  (define melody
      (begin
          (define (chord len a b c)
              (define vel (/ 1 3))
              (list
                  (note :start 0 :pitch a :length len :velocity vel)
                  (note :start 0 :pitch b :length len :velocity vel)
                  (note :start 0 :pitch c :length len :velocity vel)
              )
          )

          (sequence-all
              (list
                  (chord 1/1 "a2" "c3" "e3")
                  (chord 1/1 "a2" "d3" "f3")
                  (chord 1/2 "g#2" "b3" "e3")
                  (chord 1/2 "g#2" "b3" "d3")
                  (chord 1/1 "a2" "c3" "e3")
              ))))

  (define pad 
      (synth
          ; The name determines which synthesizer to instantiate, but
          ; currently, there is only the "test" synthesizer.
          :name "test"
          ; The available parameters depend on the synthesizer
          :params
          (dict
              :gain 1.0
              ; Use three oscillators
              :unison 3
              ; detuned from -7 to +7 cents, linearly distributed
              ; across all voices (so one -7, one 0 and one +7 cents)
              :unison-detune 7
              ; The basic shape generated by the oscillators
              :wave-shape "twosidedsaw"
              ; Envelopes give shape to the amplitude of each note.
              :envelope
                  (envelope
                      :attack 1.0   ; seconds
                      :decay 1.0    ; seconds
                      :sustain 0.2  ; linear gain
                      :release 0.1  ; seconds
                      ))))

  (song :bpm 120 :notes melody :instrument pad)

Compiling this program to a waveform results in this audio:

.. raw:: html

   <audio controls="controls">
         <source src="_static/chords.ogg" type="audio/ogg">
         Your browser does not support the <code>audio</code> element. 
   </audio>

Notes and melodies are first-class entities in syn.txt,
and can be freely recombined and passed around.

Build Instructions
------------------

The project is written in Rust_ and all tooling is pulled in via Nix_,
although just having rustc and Cargo available *should* just work.
That said, you can simply run `nix-shell` in the repository root to drop
into a shell where all dependencies are avaiable.
Then, the normal Cargo_ workflow applies.

.. code-block:: bash

   # Play the included example melody
   cargo run --bin musicc test-data/demo.syn

At the moment, it depends on spawning a sox_ subprocess and piping the audio data to it
for actually playing sound.
If everything worked, it should produce something similar to the following audio snippet:

.. raw:: html

   <audio controls="controls">
         <source src="_static/demo.ogg" type="audio/ogg">
         Your browser does not support the <code>audio</code> element. 
   </audio>

.. _chords.syn: https://github.com/fatho/syn-txt/blob/master/test-data/chords.syn
.. _roadmap: https://github.com/fatho/syn-txt/blob/master/planning/roadmap.md
.. _examples: https://github.com/fatho/syn-txt/blob/master/test-data/
.. _Rust: https://www.rust-lang.org/
.. _Nix: https://nixos.org/nix/
.. _Cargo: https://doc.rust-lang.org/cargo/
.. _sox: http://sox.sourceforge.net/


License
-------

The project is free software licensed under the `GNU General Public License Version 3`_.

.. _GNU General Public License Version 3: https://www.gnu.org/licenses/gpl-3.0.en.html

..
  Indices and tables
  ==================

  * :ref:`genindex`
  * :ref:`search`
