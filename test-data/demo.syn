; A demo song to demonstrate the capabilities of syn.txt

; This function takes a note pitch (e.g "c3" below) and builds
; a maj7 arpeggio sequence from it.
(define (arpeggio base-note)
    ; Offsets from base note in semitones
    (define seq (list 0 4 7 11 12 11 7 4))
    ; Makes it easy to change these settings for all notes
    (define len 1/16)
    (define vel 0.5)
    ; Compute note pitches by transposing base note
    (define pitches (map (lambda (off) (transpose base-note off)) seq))
    
    (imap 
        (lambda (i p)
            (note :start (* i len) :pitch p :length len :velocity vel))
        pitches
    ))

; Plays the two notes alternatingly n times
; Each note is a 1/4.
(define (alternating-bass n note-1 note-2 :length (len 1/4) :velocity (vel 0.5))
    (map
        (lambda (i)
            (define pitch (if (even? i) note-1 note-2))
            (note :start (* i len) :length len :pitch pitch :velocity vel)
        )
        (range 0 (- n 1))
    ))

; Define the melody for the (virtual) right hand
(define right-hand
    (sequence-all
        (map arpeggio 
            (list
                "c3" "c3" "c3" "c3"
                "c4" "c4" "c4" "c4"
                "c3" "c3" "c3" "c3"
            )
        )
    )
)

; Define the melody for the (virtual) left hand
(define left-hand
    (sequence-all
        (list
            (alternating-bass 8 "c2" "g1")
            (alternating-bass 8 "g2" "c2")
            (alternating-bass 8 "c2" "g1")
        )))

; Combine the final melody by playing the two melodies at the same time.
(define melody
    (concat
        right-hand
        left-hand
    )
)

; Synthesize the notes on the default synthesizer at 90 bpm
(song :bpm 90 :notes melody)