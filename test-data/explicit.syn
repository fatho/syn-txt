(define (song :bpm bpm :notes notes)
    (dict :__type__ "song" :bpm bpm :notes notes))

(define (note :start start :duration duration :pitch pitch :velocity (velocity 1.0))
    (dict :__type__ "note" :start start :duration duration :pitch pitch :velocity velocity))

(define melody
    (list
        (note :start 0 :duration 1/4 :pitch "a4")
        (note :start 1/4 :duration 1/4 :pitch "b4")
        (note :start 2/4 :duration 1/4 :pitch "c5")
    ))

(define (last-note-end melody)
    (if (cons? melody)
        (begin
            (define note (head melody))
            (define this-end (+ (get note :start) (get note :duration)))
            (define rest-end (last-note-end (tail melody)))
            (if (> this-end rest-end) this-end rest-end)
        )
        0))

(define (sequence first next :rest (rest 0))
    (define first-end (last-note-end first))
    (print first-end)
    (define (shift note) (update note :start (+ (get note :start) first-end rest)))
    (concat first (map shift next)))

(define (transpose-note note amount)
    (update note :pitch (transpose (get note :pitch) amount)))

(define (transpose-all melody amount)
    (map (lambda (n) (transpose-note n amount)) melody))

(song :bpm 120 :notes (sequence (transpose-all melody -12) melody :rest 1/4))